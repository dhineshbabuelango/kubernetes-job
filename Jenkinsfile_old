pipeline{

	agent any

	environment {
		DOCKERHUB_CREDENTIALS=credentials('dockerrepo')
	}

	stages {

		stage('Build') {

			steps {
				sh 'sudo docker build -t copyfiles:v2 build'
			}
		}

		stage('Login') {

			steps {
				sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
			}
		}

		stage('Push') {

			steps {
                sh 'sudo docker tag copyfiles:v1 dineshelango/copyfiles:v2'
				sh 'sudo docker push dineshelango/copyfiles:v2'
			}
		}

        stage('deploy-eks') {
            steps {
                sh "kubectl apply -f deployment/file.yaml"
            }
        }
	}

	post {
		always {
			sh 'docker logout'
		}
	}

}


//

pipeline {
    agnet {
        kuberbetes {
            yamlFile 'job.yaml'
        }
    }

    environment {
        DOCKERHUB_CREDENTIALS=credentials('dockercred')
    }

    stage {
        stage('docker-build') {
            steps {
                dir("${workspace}/build") {
                container('docker') {
                    dockerImage = docker.build copyfiles
                }
                }

            }
        }
    }
}

//

pipeline {
    agent {
        kubernetes {
            yamlFile 'job.yaml'
            defaultContainer 'docker'
        }
    }

    stages {
        stage('hostname') {
            steps {
                container('docker') {
                    sh 'hostname'
                }
            }
        }
        stage('dockerbuild') {
            steps {
                dir('build') {
                    script {
                        container('docker') {
                             docker.build("copyfiles:${env.BUILD_ID}")
                        }
                    }
                }
            }
        }
    }
}

//
pipeline {
    agent {
        kubernetes {
            yamlFile 'job.yaml'
        }
    }

    environment {
        registry = 'dineshelango/copyfiles'
        registryCredential = 'dockercred'
    }

    stages {
        stage('docker-build') {
            steps {
                dir(build) {
                    script {
                        container('docker') {
                            dockerImage = docker.build("copyfiles:${env.BUILD_ID}")
                        }
                    }
                }
            }
        }
        stage('docker-push') {
            steps {
                script {
                    container('docker') {
                        docker.withRegistry( '', registryCredential ) {
                            docker.Image.push()
                        }
                    }
                }
            }
        }
    }
}
